rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Funções Utilitárias
    function isAuthenticated() { return request.auth != null; }
    function isOwner(userId) { return request.auth.uid == userId; }
    function isAdmin() {
      return safeTipo(get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data) == 'admin';
    }
    function isEmpresaOwner(empresaId) {
      return safeProprietarioId(get(/databases/$(database)/documents/empresas/$(empresaId)).data) == request.auth.uid;
    }
    function safeTipo(data) {
      return data.keys().hasAny(['tipo']) && data.tipo != null ? data.tipo : '';
    }
    function safeAtivo(data) {
      return data.keys().hasAny(['ativo']) && data.ativo != null ? data.ativo : false;
    }
    function safeNome(data) {
      return data.keys().hasAny(['nome']) && data.nome != null ? data.nome : '';
    }
    function safeTelefone(data) {
      return data.keys().hasAny(['telefone']) && data.telefone != null ? data.telefone : '';
    }
    function safeEmail(data) {
      return data.keys().hasAny(['email']) && data.email != null ? data.email : '';
    }
    function safeCriadoEm(data) {
      return data.keys().hasAny(['criadoEm']) && data.criadoEm != null ? data.criadoEm : null;
    }
    function isProfissionalSafe() {
      return exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
        (safeTipo(get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data) == 'profissional');
    }
    function hasRequiredFields(data, required) {
      return data.keys().hasAll(required);
    }
    function safeProprietarioId(data) {
      return data.keys().hasAny(['proprietarioId']) && data.proprietarioId != null ? data.proprietarioId : '';
    }

    // Funções safe para EMPRESAS
    function safeNomeEmpresa(data) {
      return data.keys().hasAny(['nome']) && data.nome != null ? data.nome : '';
    }
    function safeDescricaoEmpresa(data) {
      return data.keys().hasAny(['descricao']) && data.descricao != null ? data.descricao : '';
    }
    function safeEnderecoEmpresa(data) {
      return data.keys().hasAny(['endereco']) && data.endereco != null ? data.endereco : '';
    }
    // Funções safe para SERVIÇOS
    function safeEmojiServico(data) {
      return data.keys().hasAny(['emoji']) && data.emoji != null ? data.emoji : '';
    }
    function safeEmpresaId(data) {
      return data.keys().hasAny(['empresaId']) && data.empresaId != null ? data.empresaId : '';
    }
    // Funções safe para PROMOÇÕES
    function safeTituloPromocao(data) {
      return data.keys().hasAny(['titulo']) && data.titulo != null ? data.titulo : '';
    }
    function safeValidadePromocao(data) {
      return data.keys().hasAny(['validade']) && data.validade != null ? data.validade : '';
    }
    // Funções safe para AGENDAMENTOS
    function safeClienteId(data) {
      return data.keys().hasAny(['clienteId']) && data.clienteId != null ? data.clienteId : '';
    }
    function safeServicoId(data) {
      return data.keys().hasAny(['servicoId']) && data.servicoId != null ? data.servicoId : '';
    }
    function safeDataAgendamento(data) {
      return data.keys().hasAny(['data']) && data.data != null ? data.data : '';
    }
    function safeHoraAgendamento(data) {
      return data.keys().hasAny(['hora']) && data.hora != null ? data.hora : '';
    }
    function safeStatusAgendamento(data) {
      return data.keys().hasAny(['status']) && data.status != null ? data.status : '';
    }

    // USUÁRIOS
    match /usuarios/{userId} {
      allow create: if isAuthenticated() && (
        (isProfissionalSafe() && safeTipo(request.resource.data) == 'cliente_externo') ||
        isAdmin() ||
        isOwner(userId)
      ) && request.resource.data.keys().hasAll(['nome', 'tipo', 'ativo', 'criadoEm']);

      allow read: if isAuthenticated() && (
        ((safeTipo(resource.data) == 'cliente' || safeTipo(resource.data) == 'cliente_externo') && (isProfissionalSafe() || isAdmin())) ||
        isAdmin() ||
        isOwner(userId)
      );

      allow update: if isAuthenticated() && (
        (safeTipo(resource.data) == 'cliente_externo' && (isProfissionalSafe() || isAdmin())) ||
        isAdmin() ||
        (isOwner(userId) && safeTipo(resource.data) != 'cliente_externo')
      ) && request.resource.data.keys().hasAll(['nome', 'tipo', 'ativo']);

      allow delete: if isAuthenticated() && (
        (safeTipo(resource.data) == 'cliente_externo' && (isProfissionalSafe() || isAdmin())) ||
        isAdmin()
      );
    }

    // EMPRESAS
    match /empresas/{empresaId} {
      allow read: if true;
      allow create: if isAuthenticated()
        && (isAdmin() || safeProprietarioId(request.resource.data) == request.auth.uid)
        && request.resource.data.keys().hasAll(['nome', 'descricao', 'endereco', 'proprietarioId', 'ativo', 'criadoEm']);
      allow update: if isAuthenticated()
        && (isAdmin() || safeProprietarioId(resource.data) == request.auth.uid)
        && request.resource.data.keys().hasAll(['nome', 'descricao', 'endereco', 'ativo']);
      allow delete: if isAuthenticated() && isAdmin();
    }

    // SERVIÇOS
    match /servicos/{servicoId} {
      allow read: if true;
      allow create: if isAuthenticated()
        && (isAdmin() || isEmpresaOwner(safeEmpresaId(request.resource.data)))
        && request.resource.data.keys().hasAll(['nome', 'descricao', 'emoji', 'empresaId', 'ativo', 'criadoEm']);
      allow update: if isAuthenticated()
        && (isAdmin() || isEmpresaOwner(safeEmpresaId(resource.data)))
        && request.resource.data.keys().hasAll(['nome', 'descricao', 'emoji', 'ativo']);
      allow delete: if isAuthenticated()
        && (isAdmin() || isEmpresaOwner(safeEmpresaId(resource.data)));
    }

    // PROMOÇÕES
    match /promocoes/{promoId} {
      allow read: if true;
      allow create: if isAuthenticated()
        && (isAdmin() || isEmpresaOwner(safeEmpresaId(request.resource.data)))
        && request.resource.data.keys().hasAll(['titulo', 'descricao', 'validade', 'empresaId', 'ativo', 'criadoEm']);
      allow update: if isAuthenticated()
        && (isAdmin() || isEmpresaOwner(safeEmpresaId(resource.data)))
        && request.resource.data.keys().hasAll(['titulo', 'descricao', 'validade', 'ativo']);
      allow delete: if isAuthenticated()
        && (isAdmin() || isEmpresaOwner(safeEmpresaId(resource.data)));
    }

    // AGENDAMENTOS
    match /agendamentos/{agendamentoId} {
      allow create: if isAuthenticated()
        && (isEmpresaOwner(safeEmpresaId(request.resource.data)))
        && request.resource.data.keys().hasAll(['clienteId', 'clienteTipo', 'empresaId', 'profissionalId', 'servicoId', 'data', 'hora', 'status', 'criadoEm']);
      allow read: if isAuthenticated()
        && (
          // Profissional da empresa pode ler
          isEmpresaOwner(safeEmpresaId(resource.data)) ||
          // Cliente interno pode ler seu próprio agendamento
          (resource.data.clienteTipo == 'usuario' && safeClienteId(resource.data) == request.auth.uid) ||
          // Cliente externo pode ler se o profissionalId for o mesmo do request.auth.uid (opcional, ajuste conforme sua lógica)
          (resource.data.clienteTipo == 'externo' && resource.data.profissionalId == request.auth.uid)
        );
      allow update: if isAuthenticated()
        && (isEmpresaOwner(safeEmpresaId(resource.data)))
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);
      allow delete: if isAuthenticated()
        && (isEmpresaOwner(safeEmpresaId(resource.data)));
    }

    // CLIENTES EXTERNOS
    match /clientes_externos/{clienteId} {
      allow create: if isAuthenticated() && (isProfissionalSafe() || isAdmin());
      allow read: if isAuthenticated() && (isProfissionalSafe() || isAdmin());
      allow update: if isAuthenticated() && (isProfissionalSafe() || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Regras para a coleção de logs
    match /logs/{logId} {
      allow read: if request.auth != null && (
        request.auth.token.admin == true ||
        request.auth.token.environment == resource.data.environment
      );
      allow create: if true; // Permite criação de logs de qualquer origem
      allow update, delete: if false; // Não permite modificação ou deleção de logs
    }
  }
}
